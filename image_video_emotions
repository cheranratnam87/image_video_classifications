{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9282942,"sourceType":"datasetVersion","datasetId":5618966}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-30T16:25:16.805502Z","iopub.execute_input":"2024-08-30T16:25:16.805961Z","iopub.status.idle":"2024-08-30T16:25:16.813159Z","shell.execute_reply.started":"2024-08-30T16:25:16.805919Z","shell.execute_reply":"2024-08-30T16:25:16.811983Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"pip install yt-dlp\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:40:43.664851Z","iopub.execute_input":"2024-08-30T16:40:43.665567Z","iopub.status.idle":"2024-08-30T16:41:03.478625Z","shell.execute_reply.started":"2024-08-30T16:40:43.665527Z","shell.execute_reply":"2024-08-30T16:41:03.477255Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Collecting yt-dlp\n  Downloading yt_dlp-2024.8.6-py3-none-any.whl.metadata (170 kB)\n\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m170.1/170.1 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n\u001b[?25hRequirement already satisfied: brotli in /opt/conda/lib/python3.10/site-packages (from yt-dlp) (1.1.0)\nRequirement already satisfied: certifi in /opt/conda/lib/python3.10/site-packages (from yt-dlp) (2024.7.4)\nCollecting mutagen (from yt-dlp)\n  Downloading mutagen-1.47.0-py3-none-any.whl.metadata (1.7 kB)\nCollecting pycryptodomex (from yt-dlp)\n  Downloading pycryptodomex-3.20.0-cp35-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.4 kB)\nRequirement already satisfied: requests<3,>=2.32.2 in /opt/conda/lib/python3.10/site-packages (from yt-dlp) (2.32.3)\nRequirement already satisfied: urllib3<3,>=1.26.17 in /opt/conda/lib/python3.10/site-packages (from yt-dlp) (1.26.18)\nRequirement already satisfied: websockets>=12.0 in /opt/conda/lib/python3.10/site-packages (from yt-dlp) (12.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.32.2->yt-dlp) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.32.2->yt-dlp) (3.7)\nDownloading yt_dlp-2024.8.6-py3-none-any.whl (3.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.1/3.1 MB\u001b[0m \u001b[31m40.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n\u001b[?25hDownloading mutagen-1.47.0-py3-none-any.whl (194 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.4/194.4 kB\u001b[0m \u001b[31m11.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading pycryptodomex-3.20.0-cp35-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m57.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m:00:01\u001b[0m\n\u001b[?25hInstalling collected packages: pycryptodomex, mutagen, yt-dlp\nSuccessfully installed mutagen-1.47.0 pycryptodomex-3.20.0 yt-dlp-2024.8.6\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install --upgrade pytube\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:39:38.104482Z","iopub.execute_input":"2024-08-30T16:39:38.105489Z","iopub.status.idle":"2024-08-30T16:39:53.368953Z","shell.execute_reply.started":"2024-08-30T16:39:38.105442Z","shell.execute_reply":"2024-08-30T16:39:53.367544Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"Requirement already satisfied: pytube in /opt/conda/lib/python3.10/site-packages (15.0.0)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install pytube opencv-python-headless transformers\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:38:02.372284Z","iopub.execute_input":"2024-08-30T16:38:02.372682Z","iopub.status.idle":"2024-08-30T16:38:18.092868Z","shell.execute_reply.started":"2024-08-30T16:38:02.372647Z","shell.execute_reply":"2024-08-30T16:38:18.091520Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Collecting pytube\n  Downloading pytube-15.0.0-py3-none-any.whl.metadata (5.0 kB)\nRequirement already satisfied: opencv-python-headless in /opt/conda/lib/python3.10/site-packages (4.10.0.84)\nRequirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.44.0)\nRequirement already satisfied: numpy>=1.21.2 in /opt/conda/lib/python3.10/site-packages (from opencv-python-headless) (1.26.4)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.15.1)\nRequirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.24.6)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (6.0.2)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2024.5.15)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.32.3)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.4.4)\nRequirement already satisfied: tokenizers<0.20,>=0.19 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.19.1)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.66.4)\nRequirement already satisfied: fsspec>=2023.5.0 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (2024.6.1)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /opt/conda/lib/python3.10/site-packages (from huggingface-hub<1.0,>=0.23.2->transformers) (4.12.2)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.1.2)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2024.7.4)\nDownloading pytube-15.0.0-py3-none-any.whl (57 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.6/57.6 kB\u001b[0m \u001b[31m1.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: pytube\nSuccessfully installed pytube-15.0.0\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"pip install transformers torch torchvision\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:25:18.978236Z","iopub.execute_input":"2024-08-30T16:25:18.978653Z","iopub.status.idle":"2024-08-30T16:25:35.823904Z","shell.execute_reply.started":"2024-08-30T16:25:18.978613Z","shell.execute_reply":"2024-08-30T16:25:35.822585Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"Requirement already satisfied: transformers in /opt/conda/lib/python3.10/site-packages (4.44.0)\nRequirement already satisfied: torch in /opt/conda/lib/python3.10/site-packages (2.4.0)\nRequirement already satisfied: torchvision in /opt/conda/lib/python3.10/site-packages (0.19.0)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from transformers) (3.15.1)\nRequirement already satisfied: huggingface-hub<1.0,>=0.23.2 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.24.6)\nRequirement already satisfied: numpy>=1.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (1.26.4)\nRequirement already satisfied: packaging>=20.0 in /opt/conda/lib/python3.10/site-packages (from transformers) (21.3)\nRequirement already satisfied: pyyaml>=5.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (6.0.2)\nRequirement already satisfied: regex!=2019.12.17 in /opt/conda/lib/python3.10/site-packages (from transformers) (2024.5.15)\nRequirement already satisfied: requests in /opt/conda/lib/python3.10/site-packages (from transformers) (2.32.3)\nRequirement already satisfied: safetensors>=0.4.1 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.4.4)\nRequirement already satisfied: tokenizers<0.20,>=0.19 in /opt/conda/lib/python3.10/site-packages (from transformers) (0.19.1)\nRequirement already satisfied: tqdm>=4.27 in /opt/conda/lib/python3.10/site-packages (from transformers) (4.66.4)\nRequirement already satisfied: typing-extensions>=4.8.0 in /opt/conda/lib/python3.10/site-packages (from torch) (4.12.2)\nRequirement already satisfied: sympy in /opt/conda/lib/python3.10/site-packages (from torch) (1.13.2)\nRequirement already satisfied: networkx in /opt/conda/lib/python3.10/site-packages (from torch) (3.3)\nRequirement already satisfied: jinja2 in /opt/conda/lib/python3.10/site-packages (from torch) (3.1.4)\nRequirement already satisfied: fsspec in /opt/conda/lib/python3.10/site-packages (from torch) (2024.6.1)\nRequirement already satisfied: pillow!=8.3.*,>=5.3.0 in /opt/conda/lib/python3.10/site-packages (from torchvision) (9.5.0)\nRequirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging>=20.0->transformers) (3.1.2)\nRequirement already satisfied: MarkupSafe>=2.0 in /opt/conda/lib/python3.10/site-packages (from jinja2->torch) (2.1.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests->transformers) (2024.7.4)\nRequirement already satisfied: mpmath<1.4,>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from sympy->torch) (1.3.0)\nNote: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}]},{"cell_type":"code","source":"from transformers import AutoImageProcessor, AutoModelForImageClassification\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n# Load the image processor and model\nprocessor = AutoImageProcessor.from_pretrained(\"dima806/facial_emotions_image_detection\")\nmodel = AutoModelForImageClassification.from_pretrained(\"dima806/facial_emotions_image_detection\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:31:07.266485Z","iopub.execute_input":"2024-08-30T16:31:07.266921Z","iopub.status.idle":"2024-08-30T16:31:14.566248Z","shell.execute_reply.started":"2024-08-30T16:31:07.266881Z","shell.execute_reply":"2024-08-30T16:31:14.565251Z"},"trusted":true},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/plain":"preprocessor_config.json:   0%|          | 0.00/578 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"63a8b832929e486183ec52b50330898c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/907 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"862ecef38c2940deb3ff54c8406edbd2"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/343M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"09b5579b0e204334884ae0492a438360"}},"metadata":{}}]},{"cell_type":"code","source":"from PIL import Image\n\n# Load an image from a local path\nimg_path = '/kaggle/input/imaged/qwew.jpg'  # Replace with your local file path\nimg = Image.open(img_path)\n\n# Preprocess the image\ninputs = processor(images=img, return_tensors=\"pt\")\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:31:45.909051Z","iopub.execute_input":"2024-08-30T16:31:45.909496Z","iopub.status.idle":"2024-08-30T16:31:45.955277Z","shell.execute_reply.started":"2024-08-30T16:31:45.909452Z","shell.execute_reply":"2024-08-30T16:31:45.954302Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"from PIL import Image\nfrom transformers import AutoImageProcessor, AutoModelForImageClassification\n\n# Load the image processor and model\nprocessor = AutoImageProcessor.from_pretrained(\"dima806/facial_emotions_image_detection\")\nmodel = AutoModelForImageClassification.from_pretrained(\"dima806/facial_emotions_image_detection\")\n\n# Load an image from a local path\nimg_path = '/kaggle/input/imaged/girl.jpg'  # Replace with your local file path\nimg = Image.open(img_path)\n\n# Preprocess the image\ninputs = processor(images=img, return_tensors=\"pt\")\n\n# Make predictions\noutputs = model(**inputs)\n\n# Get the predicted class\nlogits = outputs.logits\npredicted_class = logits.argmax(-1).item()\n\n# Access the model's labels\nlabels = model.config.id2label\npredicted_label = labels[predicted_class]\n\nprint(f'Predicted emotion: {predicted_label}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:34:01.350318Z","iopub.execute_input":"2024-08-30T16:34:01.350744Z","iopub.status.idle":"2024-08-30T16:34:01.820946Z","shell.execute_reply.started":"2024-08-30T16:34:01.350703Z","shell.execute_reply":"2024-08-30T16:34:01.819759Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Predicted emotion: happy\n","output_type":"stream"}]},{"cell_type":"code","source":"from PIL import Image\nimport requests\nfrom io import BytesIO\nfrom transformers import AutoImageProcessor, AutoModelForImageClassification\n\n# Load the image processor and model\nprocessor = AutoImageProcessor.from_pretrained(\"dima806/facial_emotions_image_detection\")\nmodel = AutoModelForImageClassification.from_pretrained(\"dima806/facial_emotions_image_detection\")\n\n# Define the URL of the image\nurl = 'https://th.bing.com/th/id/OIP.CEQVIV0C_Dv-MYd6pB4E5gHaEK?rs=1&pid=ImgDetMain'  # Replace with your image URL\n\n# Fetch the image from the URL\nresponse = requests.get(url)\nimg = Image.open(BytesIO(response.content))\n\n# Preprocess the image\ninputs = processor(images=img, return_tensors=\"pt\")\n\n# Make predictions\noutputs = model(**inputs)\n\n# Get the predicted class\nlogits = outputs.logits\npredicted_class = logits.argmax(-1).item()\n\n# Access the model's labels\nlabels = model.config.id2label\npredicted_label = labels[predicted_class]\n\nprint(f'Predicted emotion: {predicted_label}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T17:00:15.351297Z","iopub.execute_input":"2024-08-30T17:00:15.352158Z","iopub.status.idle":"2024-08-30T17:00:15.928995Z","shell.execute_reply.started":"2024-08-30T17:00:15.352113Z","shell.execute_reply":"2024-08-30T17:00:15.926715Z"},"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"Predicted emotion: angry\n","output_type":"stream"}]},{"cell_type":"code","source":"import yt_dlp\nimport cv2\nimport numpy as np\nfrom PIL import Image\nfrom transformers import AutoImageProcessor, AutoModelForImageClassification\nimport os\n\n# Function to delete the existing video file\ndef cleanup(file_path):\n    if os.path.exists(file_path):\n        os.remove(file_path)\n\n# Function to download video using yt-dlp\ndef download_video(url, output_path='temp_video.mp4'):\n    cleanup(output_path)  # Ensure any existing video is deleted\n    ydl_opts = {\n        'format': 'mp4',\n        'outtmpl': output_path,\n    }\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        ydl.download([url])\n\n# Extract frames from video\ndef extract_frames_from_video(video_path, num_frames=10):\n    frames = []\n    cap = cv2.VideoCapture(video_path)\n    \n    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n    interval = total_frames // num_frames\n    \n    for i in range(num_frames):\n        cap.set(cv2.CAP_PROP_POS_FRAMES, i * interval)\n        ret, frame = cap.read()\n        if ret:\n            frames.append(frame)\n    \n    cap.release()\n    return frames\n\n# Predict emotion for each frame\ndef predict_emotion(frames, processor, model):\n    predictions = []\n    for frame in frames:\n        img = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))\n        inputs = processor(images=img, return_tensors=\"pt\")\n        outputs = model(**inputs)\n        logits = outputs.logits\n        predicted_class = logits.argmax(-1).item()\n        labels = model.config.id2label\n        predicted_label = labels[predicted_class]\n        predictions.append(predicted_label)\n    return predictions\n\n# Main function\ndef analyze_video_emotion(youtube_url):\n    # Load model\n    processor = AutoImageProcessor.from_pretrained(\"dima806/facial_emotions_image_detection\")\n    model = AutoModelForImageClassification.from_pretrained(\"dima806/facial_emotions_image_detection\")\n\n    # Download video\n    download_video(youtube_url)\n    \n    # Extract frames from the downloaded video\n    frames = extract_frames_from_video('temp_video.mp4', num_frames=10)\n    \n    # Predict emotion for each frame\n    predictions = predict_emotion(frames, processor, model)\n    \n    # Calculate the overall emotion\n    overall_emotion = max(set(predictions), key=predictions.count)\n    return overall_emotion\n\n# Example usage\nyoutube_url = 'https://www.youtube.com/watch?v=SpvC6jlqldk' #GF\noverall_emotion = analyze_video_emotion(youtube_url)\nprint(f'Overall emotion: {overall_emotion}')\n\n# Test another video\nyoutube_url_new = 'https://www.youtube.com/watch?v=vBk5y0iu3yI'#SC\noverall_emotion_new = analyze_video_emotion(youtube_url_new)\nprint(f'Overall emotion for new video: {overall_emotion_new}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T17:01:01.637434Z","iopub.execute_input":"2024-08-30T17:01:01.637896Z","iopub.status.idle":"2024-08-30T17:01:17.201365Z","shell.execute_reply.started":"2024-08-30T17:01:01.637855Z","shell.execute_reply":"2024-08-30T17:01:17.200017Z"},"trusted":true},"execution_count":52,"outputs":[{"name":"stdout","text":"[youtube] Extracting URL: https://www.youtube.com/watch?v=SpvC6jlqldk\n[youtube] SpvC6jlqldk: Downloading webpage\n[youtube] SpvC6jlqldk: Downloading ios player API JSON\n[youtube] SpvC6jlqldk: Downloading web creator player API JSON\n[youtube] SpvC6jlqldk: Downloading m3u8 information\n[info] SpvC6jlqldk: Downloading 1 format(s): 18\n[download] Destination: temp_video.mp4\n[download] 100% of   47.91MiB in 00:00:00 at 57.60MiB/s    \nOverall emotion: angry\n[youtube] Extracting URL: https://www.youtube.com/watch?v=vBk5y0iu3yI\n[youtube] vBk5y0iu3yI: Downloading webpage\n[youtube] vBk5y0iu3yI: Downloading ios player API JSON\n[youtube] vBk5y0iu3yI: Downloading web creator player API JSON\n[youtube] vBk5y0iu3yI: Downloading m3u8 information\n[info] vBk5y0iu3yI: Downloading 1 format(s): 18\n[download] Destination: temp_video.mp4\n[download] 100% of   42.33MiB in 00:00:00 at 52.31MiB/s    \nOverall emotion for new video: angry\n","output_type":"stream"}]},{"cell_type":"code","source":"#K.H SPEECH\n\nyoutube_url_new3 = 'https://www.youtube.com/watch?v=1aZLL63wlTU'\noverall_emotion_new = analyze_video_emotion(youtube_url_new3)\nprint(f'Overall emotion for new video: {overall_emotion_new}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:53:28.036754Z","iopub.execute_input":"2024-08-30T16:53:28.037270Z","iopub.status.idle":"2024-08-30T16:53:36.772046Z","shell.execute_reply.started":"2024-08-30T16:53:28.037224Z","shell.execute_reply":"2024-08-30T16:53:36.770861Z"},"trusted":true},"execution_count":46,"outputs":[{"name":"stdout","text":"[youtube] Extracting URL: https://www.youtube.com/watch?v=1aZLL63wlTU\n[youtube] 1aZLL63wlTU: Downloading webpage\n[youtube] 1aZLL63wlTU: Downloading ios player API JSON\n[youtube] 1aZLL63wlTU: Downloading web creator player API JSON\n[youtube] 1aZLL63wlTU: Downloading player 70d1710a\n[youtube] 1aZLL63wlTU: Downloading m3u8 information\n[info] 1aZLL63wlTU: Downloading 1 format(s): 18\n[download] Destination: temp_video.mp4\n[download] 100% of   99.21MiB in 00:00:01 at 51.48MiB/s    \nOverall emotion for new video: happy\n","output_type":"stream"}]},{"cell_type":"code","source":"#JDV SPEECH\n\nyoutube_url_new3 = 'https://www.youtube.com/watch?v=cYzXBA7zucI'\noverall_emotion_new = analyze_video_emotion(youtube_url_new3)\nprint(f'Overall emotion for new video: {overall_emotion_new}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:54:01.822115Z","iopub.execute_input":"2024-08-30T16:54:01.823002Z","iopub.status.idle":"2024-08-30T16:54:10.919849Z","shell.execute_reply.started":"2024-08-30T16:54:01.822956Z","shell.execute_reply":"2024-08-30T16:54:10.918701Z"},"trusted":true},"execution_count":47,"outputs":[{"name":"stdout","text":"[youtube] Extracting URL: https://www.youtube.com/watch?v=cYzXBA7zucI\n[youtube] cYzXBA7zucI: Downloading webpage\n[youtube] cYzXBA7zucI: Downloading ios player API JSON\n[youtube] cYzXBA7zucI: Downloading web creator player API JSON\n[youtube] cYzXBA7zucI: Downloading m3u8 information\n[info] cYzXBA7zucI: Downloading 1 format(s): 18\n[download] Destination: temp_video.mp4\n[download] 100% of   93.81MiB in 00:00:02 at 35.35MiB/s    \nOverall emotion for new video: angry\n","output_type":"stream"}]},{"cell_type":"code","source":"#T SPEECH\n\nyoutube_url_new3 = 'https://www.youtube.com/watch?v=YG37yFh7SzM'\noverall_emotion_new = analyze_video_emotion(youtube_url_new3)\nprint(f'Overall emotion for new video: {overall_emotion_new}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:56:09.444889Z","iopub.execute_input":"2024-08-30T16:56:09.445340Z","iopub.status.idle":"2024-08-30T16:56:19.139115Z","shell.execute_reply.started":"2024-08-30T16:56:09.445302Z","shell.execute_reply":"2024-08-30T16:56:19.137893Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"[youtube] Extracting URL: https://www.youtube.com/watch?v=YG37yFh7SzM\n[youtube] YG37yFh7SzM: Downloading webpage\n[youtube] YG37yFh7SzM: Downloading ios player API JSON\n[youtube] YG37yFh7SzM: Downloading web creator player API JSON\n[youtube] YG37yFh7SzM: Downloading m3u8 information\n[info] YG37yFh7SzM: Downloading 1 format(s): 18\n[download] Destination: temp_video.mp4\n[download] 100% of   52.10MiB in 00:00:01 at 38.75MiB/s    \nOverall emotion for new video: angry\n","output_type":"stream"}]},{"cell_type":"code","source":"#WALZ SPEECH\n\nyoutube_url_new3 = 'https://www.youtube.com/watch?v=Mf0u5MJEjhw'\noverall_emotion_new = analyze_video_emotion(youtube_url_new3)\nprint(f'Overall emotion for new video: {overall_emotion_new}')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-30T16:57:20.630120Z","iopub.execute_input":"2024-08-30T16:57:20.630599Z","iopub.status.idle":"2024-08-30T16:57:28.458099Z","shell.execute_reply.started":"2024-08-30T16:57:20.630555Z","shell.execute_reply":"2024-08-30T16:57:28.456906Z"},"trusted":true},"execution_count":49,"outputs":[{"name":"stdout","text":"[youtube] Extracting URL: https://www.youtube.com/watch?v=Mf0u5MJEjhw\n[youtube] Mf0u5MJEjhw: Downloading webpage\n[youtube] Mf0u5MJEjhw: Downloading ios player API JSON\n[youtube] Mf0u5MJEjhw: Downloading web creator player API JSON\n[youtube] Mf0u5MJEjhw: Downloading m3u8 information\n[info] Mf0u5MJEjhw: Downloading 1 format(s): 18\n[download] Destination: temp_video.mp4\n[download] 100% of   67.00MiB in 00:00:01 at 44.94MiB/s    \nOverall emotion for new video: angry\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}